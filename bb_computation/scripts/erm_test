#!/usr/bin/env python

import rospy

from bb_util.msg import cue_msg
from bb_util.msg import erm_status
from bb_util.msg import ring_mapping

from extended_ring_model import *
from dict_key_definitions import *

from nav_msgs.msg import Odometry
from geometry_msgs.msg import Twist
from rospy.numpy_msg import numpy_msg

use_efference = True

erm = RingModel()
c1_end, c2_end = erm.initialise()
print(erm.epg_rates)

# Globals
angular_velocity = 0

th_intensity = 0
th_wind = 0

w_intensity = 0.5 # Set equal weights to get things running
w_wind = 0.5

def odom_av_callback(data):
    global angular_velocity
    twist = data.twist.twist.angular
    angular_velocity = twist.z

def efference_av_callback(data):
    global angular_velocity
    angular_velocity = data.angular.z

def wind_cue_callback(data):
    global th_wind
    th_wind = np.degrees(data.theta)


def intensity_cue_callback(data):
    global th_intensity
    th_intensity = np.degrees(data.theta)


def get_erm_status_as_msg():
    msg = erm_status()
    msg.r1 = erm.r1_rates
    msg.r2 = erm.r2_rates
    msg.epg = erm.epg_rates
    msg.d7 = erm.d7_rates
    msg.pen = erm.pen_rates
    msg.peg = erm.peg_rates

    n_r1 = erm.n_r1
    n_r2 = erm.n_r2
    n_epg = erm.n_epg
    len_r1 = n_r1*n_epg
    len_r2 = n_r2*n_epg

    msg.r1_epg = list(np.reshape(erm.w_r1_epg, (len_r1,)))
    msg.r2_epg = list(np.reshape(erm.w_r2_epg, (len_r2,)))
    msg.n_r1 = erm.n_r1
    msg.n_r2 = erm.n_r2
    msg.n_epg = erm.n_epg
    return msg

# def get_erm_mappings_as_msg():
#     msg = ring_mapping()

#     # Explicitly cast weight matrices to floats everywhere
#     # then pack into the message. Saw someone with the exact
#     # same error for whom this was the solution.

#     n_r1 = erm.n_r1
#     n_r2 = erm.n_r2
#     n_epg = erm.n_epg
#     len_r1 = n_r1*n_epg
#     len_r2 = n_r2*n_epg

#     msg.r1_epg = list(np.reshape(erm.w_r1_epg, (len_r1,)))
#     msg.r2_epg = list(np.reshape(erm.w_r2_epg, (len_r2,)))
#     msg.n_r1 = erm.n_r1
#     msg.n_r2 = erm.n_r2
#     msg.n_epg = erm.n_epg

#     return msg

def node():
    rospy.init_node("erm_node")
    if use_efference:
        rospy.Subscriber("cmd_vel", Twist,  efference_av_callback)
    else:
        rospy.Subscriber("odom", Odometry, odom_av_callback)

    rospy.Subscriber("wind_cue", cue_msg, wind_cue_callback)
    rospy.Subscriber("intensity_cue", cue_msg, intensity_cue_callback)
    # Rospy subscribers are implicitly started in their own threads

    pub = rospy.Publisher("erm_status", numpy_msg(erm_status), queue_size=10)

    loop_hz = 10
    rosrate = rospy.Rate(loop_hz)

    while not rospy.is_shutdown():
        # Convert Rad/s to Deg/s then scale for loop rate.
        av = -(np.degrees(angular_velocity)) / loop_hz
        print(th_intensity)
        print(erm.epg_rates)
        erm.update_state(th_intensity,
                         th_wind,
                         av,
                         w1=w_intensity,
                         w2=w_wind
        )
        print(erm.epg_rates)
        msg = get_erm_status_as_msg()
        pub.publish(msg)
        rosrate.sleep()


if __name__ == "__main__":
    node()

