#!/usr/bin/env python

import rospy

from bb_util.msg import cue_msg

from extended_ring_model import *
from dict_key_definitions import *

from nav_msgs.msg import Odometry
from geometry_msgs.msg import Twist
from tf.transformations import euler_from_quaternion

use_efference = True

erm = RingModel()
erm.initialise()

# Globals
angular_velocity = 0

th_intensity = 0
th_wind = 0

w_intensity = 0.5 # Set equal weights to get things running
w_wind = 0.5

def odom_av_callback(data):
    global angular_velocity
    twist = data.twist.twist.angular
    angular_velocity = twist.z

def efference_av_callback(data):
    global angular_velocity
    angular_velocity = data.angular.z

def wind_cue_callback(data):
    global th_wind
    th_wind = np.degreess(data.theta)

def intensity_cue_callback(data):
    global th_intensity
    th_intensity = np.degrees(data.theta)

def node():
    rospy.init_node("erm_node")
    if use_efference:
        rospy.Subscriber("cmd_vel", Twist,  efference_av_callback)
    else:
        rospy.Subscriber("odom", Odometry, odom_av_callback)

    rospy.Subscriber("wind_cue", cue_msg, wind_cue_callback)
    rospy.Subscriber("intensity_cue", cue_msg, intensity_cue_callback)
    # Rospy subscribers are implicitly started in their own threads

    while not rospy.is_shutdown():
        # Convert av to deg/s (default is Rads/s)
        av = angular_velocity * (180/np.pi)

        erm.update_state(th_intensity,
                         th_wind,
                         av,
                         w1=w_intensity,
                         w2=w_wind)
        int_th = erm.decode()[decodekeys.epg]
        print(int_th)
#        print("{} : {} : {}".format(th_intensity, th_wind, angular_velocity))

if __name__ == "__main__":
    node()

