#!/usr/bin/python

"""
vmcx_status

This file starts a ROS subscriber on vmcx_status and animates the
network activity in real time.  This includes an extra 'vector memory'
layer which allows visualisation of the VM synapses in the model
(i.e. the stored vector). This is largely useful for diagnostics.
This module does not plot TL2 or CL1 activity (though they are 
in the model). The TL2/CL1 populations don't really do anything
in this model so they are excluded for plotting space.

The structure of this file is largely dictated by the requirements
for matplotlib.animation.FuncAnimation. The only 'novel' element is
the ROS subscriber which sets the underlying data.
"""

import rospy
import numpy as np
from matplotlib import pyplot as plt
from matplotlib.animation import FuncAnimation

# Vector Memory activity message
from bb_util.msg import vmcx_activity

# Declare figure
fig, (tb1_ax, cpu4_ax, vm_ax, active_ax, cpu1_ax) = plt.subplots(5,1)

#
# Declare global datastructures
#
tb1_xdata = range(8)
tb1_ydata = []

cpu4_xdata = range(16)
cpu4_ydata = []

vm_xdata = range(16)
vm_ydata = []

active_xdata = range(16)
active_ydata = []

cpu1_xdata = range(16)
cpu1_ydata = []

cpu1_lft_ydata = 0
cpu1_rgt_ydata = 0

xdata = range(360)
ydata = []

#
# Artist objects for blitting
#
tb1_ln, = tb1_ax.plot([], [], 'g')
cpu4_ln, = cpu4_ax.plot([], [], 'red')
vm_ln, = vm_ax.plot([], [], 'yellow')
active_ln, = active_ax.plot([], [], 'orange')

cpu1_labels = ['CPU1 Left', 'CPU1 Right']
cpu1_bar = cpu1_ax.bar(cpu1_labels, [1,1])
cpu1_lft = cpu1_bar.patches[0]
cpu1_rgt = cpu1_bar.patches[1]

fig.tight_layout()

# Required for blitting, iterable of all Artists which were updated
# on the animation callback.
circuit_ln = [tb1_ln, cpu4_ln, vm_ln, active_ln, cpu1_lft, cpu1_rgt]

#
# Update ydata based on incoming messages
#
def ros_callback(data):
    """
    Update local copies of the data (neuron population activities).
    :param data: The ROS message
    """    
    global vm_ydata
    global active_ydata
    global tb1_ydata
    global cpu4_ydata
    global cpu1_ydata
    global cpu1_lft_ydata
    global cpu1_rgt_ydata

    vm_ydata = data.vm
    active_ydata = data.active
    tb1_ydata = data.tb1
    cpu4_ydata = data.cpu4
    cpu1_ydata = data.cpu1
    cpu1_lft_ydata = sum(data.cpu1[:8]) / sum(data.cpu1)
    cpu1_rgt_ydata = sum(data.cpu1[8:]) / sum(data.cpu1)

    print(cpu1_lft_ydata)
    print(cpu1_rgt_ydata)

#
# Animation initialisation
#
def animation_init():
    """
    Initialise the plot 'frame' to be used for the animation.
    (e.g. set titles and axis information)
    :return: A list of artists to be used by FuncAnimation.
    """    
    vm_ax.set_xlim(1, 16)
    vm_ax.set_ylim(-0.6, 0.6)
    vm_ax.set_xticks(range(1,17))
    vm_ax.set_title("VM Activity")

    active_ax.set_xlim(1, 16)
    active_ax.set_ylim(0, 1.2)
    active_ax.set_xticks(range(1,17))
    active_ax.set_title("ACTIVE Activity")

    tb1_ax.set_xlim(1, 8)
    tb1_ax.set_ylim(0 ,1.2)
    tb1_ax.set_xticks(range(1,9))
    tb1_ax.set_title("TB1 Activity")

    cpu4_ax.set_xlim(1, 16)
    cpu4_ax.set_ylim(0, 1.2)
    cpu4_ax.set_xticks(range(1,17))
    cpu4_ax.set_title("CPU4 Activity")

    cpu1_ax.set_ylim(0, 1)
    cpu1_ax.set_title("CPU1 Activity")

    return circuit_ln

#
# For animation loop
#
def animation_callback(frames):
    """
    Animation callback (update underlying data).
    :param frames: Next frame parameter.
    :return: A list of artists to be updated by FuncAnimation

    Note that the 'frames' parameter is not used directly. It is
    required for the function argument for FuncAnimation.
    """    
    global vm_ydata
    global vm_xdata
    global active_ydata
    global active_xdata
    global tb1_ydata
    global tb1_xdata
    global cpu4_ydata
    global cpu4_xdata
    global cpu1_ydata
    global cpu1_xdata

#    rospy.loginfo("animation_callback")

    vm_xdata = range(1, 1 + len(vm_ydata))
    active_xdata = range(1, 1 + len(active_ydata))
    tb1_xdata = range(1, 1 + len(tb1_ydata))
    cpu4_xdata = range(1, 1 + len(cpu4_ydata))
    cpu1_xdata = range(1, 1 + len(cpu1_ydata))

    circuit_ln[0].set_data(tb1_xdata, tb1_ydata)
    circuit_ln[1].set_data(cpu4_xdata, cpu4_ydata)
    circuit_ln[2].set_data(vm_xdata, vm_ydata)
    circuit_ln[3].set_data(active_xdata, active_ydata)
    circuit_ln[4].set_height(cpu1_lft_ydata)
    circuit_ln[5].set_height(cpu1_rgt_ydata)

    return circuit_ln

if __name__ == '__main__':
    # Init ROS node and subscriber
    rospy.init_node('vmcx_visualisation', anonymous=True)
    rospy.Subscriber("vmcx_status", vmcx_activity, ros_callback)

    # Set up animation  (see matplotlib.animation.FuncAnimation docs)
    ani = FuncAnimation(fig,
                        animation_callback,
                        init_func=animation_init,
                        blit=True,
                        interval=10)

    plt.show() # Show the plot window
    rospy.spin() # Start the ROS main loop


